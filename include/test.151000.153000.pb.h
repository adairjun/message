// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.151000.153000.proto

#ifndef PROTOBUF_test_2e151000_2e153000_2eproto__INCLUDED
#define PROTOBUF_test_2e151000_2e153000_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rapidmsg.pb.h"
// @@protoc_insertion_point(includes)

namespace rapidmsg {
namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2e151000_2e153000_2eproto();
void protobuf_AssignDesc_test_2e151000_2e153000_2eproto();
void protobuf_ShutdownFile_test_2e151000_2e153000_2eproto();

class JustTestRequest;
class JustTestResponse;

enum MessageType {
  BEGINNING_ID = 151000,
  JUST_TEST_REQUEST = 151001,
  JUST_TEST_RESPONSE = 151002,
  ENDING_ID = 153000
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = BEGINNING_ID;
const MessageType MessageType_MAX = ENDING_ID;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ErrorCode {
  EC_INVALID_PARAM = 151001
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = EC_INVALID_PARAM;
const ErrorCode ErrorCode_MAX = EC_INVALID_PARAM;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class JustTestRequest : public ::google::protobuf::Message {
 public:
  JustTestRequest();
  virtual ~JustTestRequest();

  JustTestRequest(const JustTestRequest& from);

  inline JustTestRequest& operator=(const JustTestRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JustTestRequest& default_instance();

  void Swap(JustTestRequest* other);

  // implements Message ----------------------------------------------

  JustTestRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JustTestRequest& from);
  void MergeFrom(const JustTestRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 test_id = 10;
  inline bool has_test_id() const;
  inline void clear_test_id();
  static const int kTestIdFieldNumber = 10;
  inline ::google::protobuf::uint32 test_id() const;
  inline void set_test_id(::google::protobuf::uint32 value);

  // required string test_name = 20;
  inline bool has_test_name() const;
  inline void clear_test_name();
  static const int kTestNameFieldNumber = 20;
  inline const ::std::string& test_name() const;
  inline void set_test_name(const ::std::string& value);
  inline void set_test_name(const char* value);
  inline void set_test_name(const char* value, size_t size);
  inline ::std::string* mutable_test_name();
  inline ::std::string* release_test_name();
  inline void set_allocated_test_name(::std::string* test_name);

  // @@protoc_insertion_point(class_scope:rapidmsg.test.JustTestRequest)
 private:
  inline void set_has_test_id();
  inline void clear_has_test_id();
  inline void set_has_test_name();
  inline void clear_has_test_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* test_name_;
  ::google::protobuf::uint32 test_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_test_2e151000_2e153000_2eproto();
  friend void protobuf_AssignDesc_test_2e151000_2e153000_2eproto();
  friend void protobuf_ShutdownFile_test_2e151000_2e153000_2eproto();

  void InitAsDefaultInstance();
  static JustTestRequest* default_instance_;
};
// -------------------------------------------------------------------

class JustTestResponse : public ::google::protobuf::Message {
 public:
  JustTestResponse();
  virtual ~JustTestResponse();

  JustTestResponse(const JustTestResponse& from);

  inline JustTestResponse& operator=(const JustTestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JustTestResponse& default_instance();

  void Swap(JustTestResponse* other);

  // implements Message ----------------------------------------------

  JustTestResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JustTestResponse& from);
  void MergeFrom(const JustTestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .rapidmsg.ResponseCode rc = 10;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 10;
  inline const ::rapidmsg::ResponseCode& rc() const;
  inline ::rapidmsg::ResponseCode* mutable_rc();
  inline ::rapidmsg::ResponseCode* release_rc();
  inline void set_allocated_rc(::rapidmsg::ResponseCode* rc);

  // optional uint32 test_id = 20;
  inline bool has_test_id() const;
  inline void clear_test_id();
  static const int kTestIdFieldNumber = 20;
  inline ::google::protobuf::uint32 test_id() const;
  inline void set_test_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rapidmsg.test.JustTestResponse)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();
  inline void set_has_test_id();
  inline void clear_has_test_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::rapidmsg::ResponseCode* rc_;
  ::google::protobuf::uint32 test_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_test_2e151000_2e153000_2eproto();
  friend void protobuf_AssignDesc_test_2e151000_2e153000_2eproto();
  friend void protobuf_ShutdownFile_test_2e151000_2e153000_2eproto();

  void InitAsDefaultInstance();
  static JustTestResponse* default_instance_;
};
// ===================================================================

static const int kJustTestRequestFieldNumber = 151001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::rapidmsg::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::rapidmsg::test::JustTestRequest >, 11, false >
  just_test_request;
static const int kJustTestResponseFieldNumber = 151002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::rapidmsg::Body,
    ::google::protobuf::internal::MessageTypeTraits< ::rapidmsg::test::JustTestResponse >, 11, false >
  just_test_response;

// ===================================================================

// JustTestRequest

// required uint32 test_id = 10;
inline bool JustTestRequest::has_test_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JustTestRequest::set_has_test_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JustTestRequest::clear_has_test_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JustTestRequest::clear_test_id() {
  test_id_ = 0u;
  clear_has_test_id();
}
inline ::google::protobuf::uint32 JustTestRequest::test_id() const {
  return test_id_;
}
inline void JustTestRequest::set_test_id(::google::protobuf::uint32 value) {
  set_has_test_id();
  test_id_ = value;
}

// required string test_name = 20;
inline bool JustTestRequest::has_test_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JustTestRequest::set_has_test_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JustTestRequest::clear_has_test_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JustTestRequest::clear_test_name() {
  if (test_name_ != &::google::protobuf::internal::kEmptyString) {
    test_name_->clear();
  }
  clear_has_test_name();
}
inline const ::std::string& JustTestRequest::test_name() const {
  return *test_name_;
}
inline void JustTestRequest::set_test_name(const ::std::string& value) {
  set_has_test_name();
  if (test_name_ == &::google::protobuf::internal::kEmptyString) {
    test_name_ = new ::std::string;
  }
  test_name_->assign(value);
}
inline void JustTestRequest::set_test_name(const char* value) {
  set_has_test_name();
  if (test_name_ == &::google::protobuf::internal::kEmptyString) {
    test_name_ = new ::std::string;
  }
  test_name_->assign(value);
}
inline void JustTestRequest::set_test_name(const char* value, size_t size) {
  set_has_test_name();
  if (test_name_ == &::google::protobuf::internal::kEmptyString) {
    test_name_ = new ::std::string;
  }
  test_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JustTestRequest::mutable_test_name() {
  set_has_test_name();
  if (test_name_ == &::google::protobuf::internal::kEmptyString) {
    test_name_ = new ::std::string;
  }
  return test_name_;
}
inline ::std::string* JustTestRequest::release_test_name() {
  clear_has_test_name();
  if (test_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = test_name_;
    test_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JustTestRequest::set_allocated_test_name(::std::string* test_name) {
  if (test_name_ != &::google::protobuf::internal::kEmptyString) {
    delete test_name_;
  }
  if (test_name) {
    set_has_test_name();
    test_name_ = test_name;
  } else {
    clear_has_test_name();
    test_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// JustTestResponse

// required .rapidmsg.ResponseCode rc = 10;
inline bool JustTestResponse::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JustTestResponse::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JustTestResponse::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JustTestResponse::clear_rc() {
  if (rc_ != NULL) rc_->::rapidmsg::ResponseCode::Clear();
  clear_has_rc();
}
inline const ::rapidmsg::ResponseCode& JustTestResponse::rc() const {
  return rc_ != NULL ? *rc_ : *default_instance_->rc_;
}
inline ::rapidmsg::ResponseCode* JustTestResponse::mutable_rc() {
  set_has_rc();
  if (rc_ == NULL) rc_ = new ::rapidmsg::ResponseCode;
  return rc_;
}
inline ::rapidmsg::ResponseCode* JustTestResponse::release_rc() {
  clear_has_rc();
  ::rapidmsg::ResponseCode* temp = rc_;
  rc_ = NULL;
  return temp;
}
inline void JustTestResponse::set_allocated_rc(::rapidmsg::ResponseCode* rc) {
  delete rc_;
  rc_ = rc;
  if (rc) {
    set_has_rc();
  } else {
    clear_has_rc();
  }
}

// optional uint32 test_id = 20;
inline bool JustTestResponse::has_test_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JustTestResponse::set_has_test_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JustTestResponse::clear_has_test_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JustTestResponse::clear_test_id() {
  test_id_ = 0u;
  clear_has_test_id();
}
inline ::google::protobuf::uint32 JustTestResponse::test_id() const {
  return test_id_;
}
inline void JustTestResponse::set_test_id(::google::protobuf::uint32 value) {
  set_has_test_id();
  test_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace rapidmsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rapidmsg::test::MessageType>() {
  return ::rapidmsg::test::MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rapidmsg::test::ErrorCode>() {
  return ::rapidmsg::test::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_test_2e151000_2e153000_2eproto__INCLUDED
